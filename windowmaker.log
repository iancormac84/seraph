6f3efa509329076debb2b3cb4e5177afafc61a22: First commit. Going to try to implement Unreal Engine 4's windowing systems. Of course, this wouldn't be a good idea to use in code in my game engine, but this is for testing purposes.
0dd2d546b17e026f7280c3c3327e5be2e9820d65: Implemented a lot of the Unreal Engine 4 FWindowsWindow API. I have to decide whether to make some of the methods be part of a trait so that I can implement them for other platform specific data structures. It compiles successfully, by the way.
cd13e9a0fab39920912ba0dd216d0507eb2a1464: Implemented part of FWindowsApplication. It has many different parts to it that I most likely will have to stub out for now. I'm working towards testing the message handling system to see if my hack with the IWindowsMessageHandler trait will work. I probably am going to implement the FWindowsWindow::Initialize method next.
cb91d9aabab31499d450e63e85017c4cf8a88da4: Restructured the crate structure so that all the code isn't contained in one monolothic file. I have a preliminary structure set up for cross-platform implementations of everything needed for a native windowing library. This work came after a long struggle with trying to implement IDropTarget for WindowsWindow. I have an idea to create a thread-local storage container with static bounds that will allow me to access the WindowsWindow's OLE reference count variable and other stuff. Don't know if it will work. If it compiles, I'll feel pretty badass. If a test program runs, I'll feel I'm on my way to important breakthroughs about Rust.
409e41ccc6f5eda0f2c6813d677f71290403daad: Made a lot of additions that I'm not sure about. Most of the additions were based on code in the GenericApplicationMessageHandler.h and GenericApplication.cpp files. I implemented a class with static strings representing the different control inputs that could be seen by the game engine. Also, I implemented the GenericApplicationMessageHandler virtual class as a trait. I don't know if that's the right thing to do; a delegate class comes to mind. Also, I have reservations about my liberal use of the GenericWindow trait as variable input to the trait's methods, partly because I'm not sure how the fact that I don't have an equivalent to both the SharedRef and SharedPtr classes.
bc4155912e4103b36b07bc075044ead32734953d: Not buildable in its current state, but I wanted to save my progress. I'm now trying to implement the Windows message handling infrastructure.
0d15bd934174e24ff4791586cc9e43f8d748b38e: Still not building, but I've gotten much closer to eliminating all the errors in the code. One big error will be eliminated when I implement the DeferMessage method for WindowsApplication. This will be a bit of a haul though, because I'll have to implement a lot of other functions.
7749509b958851d1e3653337dd149a8074e5adc7: Added Cursor implementation etc. Going to try to implement the base class for the platform specific Application classes. Not sure what I'm doing, but I have to try something.
08aada4a02d1373130f34191beb330fbeaf1fdc9: Still not compiling. Was messing around with ApplicationMessageHandler and trait objects. I don't like my solution, which was to mem::transmute the WindowsWindow variable to a GenericWindow variable. I'm going to try to change this. Anyway committing this so I can recover some code that I accidentally deleted.